<?php

/**
 * @file
 * Provides a cdp task entity type.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Render\Element;

/**
 * Implements hook_theme().
 */
function cdp_task_theme()
{
  return [
    'cdp_task' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for cdp task templates.
 *
 * Default template: cdp-task.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the cdp task information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_cdp_task(array &$variables)
{
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

function _cdp_task_get_role()
{
  $roles = ['developer', 'tech_lead'];
  foreach ($roles as $role) {
    if (\Drupal\user\Entity\User::load(\Drupal::currentUser()->id())->hasRole($role)) {
      return $role;
    }
  }
}

/**
 * Updates defintion for set entity.
 */
function cdp_task_update_8001()
{
  $data = Drupal::service('cdp_jira_api');
  $field_storage_definition = BaseFieldDefinition::create('list_string')
    ->setLabel(t('Jira key'))
    ->setCardinality(1)
    ->setSetting('allowed_values', $data->getContent())
    ->setDefaultValue('- None -')
    ->setDisplayOptions(
      'form',
      [
        'type' => 'list',
        'weight' => 10,
      ]
    )
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions(
      'view',
      [
        'type' => 'list',
        'weight' => 10,
      ]
    )
    ->setDisplayConfigurable('view', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('jira_key', 'cdp_task', 'cdp_task', $field_storage_definition);
}
